//vector.h
#pragma once

template<class T>
class vector
{int n;
T vec[20];
public:
	vector<T>();
	vector<T>(T valor[], int p);
	vector<T> operator+(vector<T> valor);
	T elemento(int j);
	int tamaño();
	void visualizar();
	~vector(void);
};

//vector.cpp
#include "StdAfx.h"
#include "vector.h"
#include <iostream>

using namespace std;

template <class T>
vector<T>::vector()
{n=0;
for(int i=0;i<n;i++)
{vec[i]=0
}
}

template <class T>
int vector<T>::tamaño()
{return n;
}

template <class T>
vector<T>::vector(T valores[],int p)
{n=p;
for(int i=0;i<n;i++)
{vec[i]=valores.vec[i];
}
}
template <class T>
vector<T> vector<T>::operator+(vector<T> valor)
{int i;
for(i=0;i<n;i++)
{vec[i]=vec[i]+valor.vec[i];
}
return *this;
}
template <class T>
T vector<T>::elemento(int j)
{return vec[j];
}
template <class T>
void vector<T>::visualizar()
{for(int i=0;i<n;i++)
{cout<<"vec["<<i<<"] :"<<vec[i]<<"  "endl;
}
}
template <class T>
vector<T>::~vector(void)
{
}

//main
#include "stdafx.h"
#include <iostream>
#include <conio.h>
#include "vector.h"

using namespace std;

void main()
{ 
	int v1[9]={1,2,3,4,5,6};
	int v2[9]={2,3,4,5,6,9};
	float v3[9]={1.3,2.6,3,4.7,5.9,6.0};
	float v4[9]={2.4,3.5,4.7,5.7,6.9,9.0};
	vector<float> VA(v3,9);
	vector<float> VB(v4,9);
	vector<float> VC(0,0);
	VC=VA+VB;
	VC.visualizar();
	getch();
}

