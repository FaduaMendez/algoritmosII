#include <conio.h>
#include <iostream>
#include "stdlib.h"
#define N 10

using namespace std;
//DECLARACIONES
void cargar(int matriz[N][N],int n,int m,char c);
void mostrar(int matriz[N][N],int n,int m,char c);
void boicot(int matriz1[N][N],int matriz2[N][N],int matriz3[N][N],int n,int m,int y);
void multiplicar(int matriz1[N][N],int matriz2[N][N],int matriz3[N][N],int n1,int m1,int n2,int m2,int &n3,int &m3);
void cambiarmatrices(int matriz1[N][N],int matriz2[N][N],int matriz3[N][N],int n1,int m1,int n2,int m2,int &n3,int &m3,int l);
void transpuesta(int matriz3[N][N],int n3,int m3);
void ordenarporfila(int matriz1[N][N],int matriz2[N][N],int matriz3[N][N],int n1,int m1,int n2,int m2,int &n3,int &m3,int l);
void ordenarporcolumna(int matriz1[N][N],int matriz2[N][N],int matriz3[N][N],int n1,int m1,int n2,int m2,int &n3,int &m3,int l);
//MAIN
void main()
{int matriz1[N][N],matriz2[N][N],matriz3[N][N],matriz4[N][N],a[N],D[N][N];
int i,j,n1,m1,n2,m2,n3,m3,l,k,o,z,aux,e,coef,c,p,s;
cout<<"Ingrese el numero de las filas de la matriz1:";
cin>>n1;
cout<<"Ingrese el numero de las columnas de la matriz1:";
cin>>m1;
cargar(matriz1,n1,m1,'A');
cout<<"Ingrese el numero de las filas de la matriz2:";
cin>>n2;
cout<<"Ingrese el numero de las columnas de la matriz2:";
cin>>m2;
cargar(matriz2,n2,m2,'B');
do{
	mostrar(matriz1,n1,m1,'A');
	mostrar(matriz2,n2,m2,'B');
	cout<<"1.SUMA"<<endl;
		cout<<"2.RESTA"<<endl;
		cout<<"3.MULTIPLICACION"<<endl;
		cout<<"4.TRANSPUESTA"<<endl;
		cout<<"5.ORDENAR POR FILA"<<endl;
		cout<<"6.ORDENAR POR COLUMNA"<<endl;
		cout<<"7.DIVIDIR"<<endl;
		cout<<"0.SALIR"<<endl;
		cout<<"ESCOJA UNA OPCION:";
		cin>>o;
switch(o)
{case 1: if((n1!=n2)||(m1!=m2))	
		 cout<<"No se puede sumar";
		 else
		 {boicot(matriz1,matriz2,matriz3,n1,m1,1);
         mostrar(matriz3,n1,m1,'C');
		 }getch();
         break;


case 2: if((n1!=n2)||(m1!=m2))	
		 cout<<"No se puede restar";
		 else
		 {boicot(matriz1,matriz2,matriz3,n1,m1,2);
         mostrar(matriz3,n1,m1,'C');
		 }getch();
         break;

case 3:  if(m1!=n2)
         cout<<"No se puede multiplicar";
		 else
		 {
		 multiplicar(matriz1,matriz2,matriz3,n1,m1,n2,m2,n3,m3);
		 mostrar(matriz3,n3,m3,'C');
		 }
		 getch();
		 break;

case 4:
	   do{cout<<"Que matriz quiere trasponer?";
	   cin>>l;
	   }while(l<1||l>2);
	   cambiarmatrices(matriz1,matriz2,matriz3,n1,m1,n2,m2,n3,m3,l);
	   transpuesta(matriz3,n3,m3);
	   mostrar(matriz3,n3,m3,'C');
	   getch();
	   break;

case 5:do{cout<<"Que matriz quiere ordenar?";
		cin>>l;
		}while(l<1||l>2);
	   ordenarporfila(matriz1,matriz2,matriz3,n1,m1,n2,m2,n3,m3,l);
	    mostrar(matriz3,n3,m3,'C');
	   getch();
	   break;
case 6:do{cout<<"Que matriz quiere ordenar?";
		cin>>l;
		}while(l<1||l>2);
	   ordenarporcolumna(matriz1,matriz2,matriz3,n1,m1,n2,m2,n3,m3,l);
	    mostrar(matriz3,n3,m3,'C');
	   getch();
	   break;
case 0:cout<<"SALIR";
	getch();
	break;
}
system("cls");
}while(o!=0);
getch();
}

//DEFINICIONES
void cargar(int matriz[N][N],int n,int m,char c)
{int i=0,j;
while(i<n)
{j=0;
 while(j<m)
 {cout<<c<<"["<<i<<"]["<<j<<"]";
  cin>>matriz[i][j];
  j++;
 }
i++;
}
}
void mostrar(int matriz[N][N],int n,int m,char c)
{int i=0,j;
cout<<"La matriz "<<c<<endl;
while(i<n)
{j=0;
 while(j<m)
 {cout<<matriz[i][j]<<"  ";
  j++;
 }
 cout<<endl;
 i++;
}
}
void boicot(int matriz1[N][N],int matriz2[N][N],int matriz3[N][N],int n,int m,int y)
{int i=0,j,k;
while(i<n)
{j=0;
while(j<m)
{if(y==1)
 matriz3[i][j]=matriz1[i][j]+matriz2[i][j];
else
	matriz3[i][j]=matriz1[i][j]-matriz2[i][j];
j++;
}
i++;
}
}
void multiplicar(int matriz1[N][N],int matriz2[N][N],int matriz3[N][N],int n1,int m1,int n2,int m2,int &n3,int &m3)
{int i=0,j,k=0,z;
while(i<n1)
				{j=0;
				while(j<m2)
				{z=0;
				while(z<m1)
				{k=k+ matriz1[i][z] * matriz2[z][j];
					z++;
				}
				matriz3[i][j]=k;
				k=0;
				j++;
				}i++;
}
n3=n1;
m3=m2;
}
void cambiarmatrices(int matriz1[N][N],int matriz2[N][N],int matriz3[N][N],int n1,int m1,int n2,int m2,int &n3,int &m3,int l)
{int i,j;
	if(l==1){i=0;
				while(i<n1)
				{j=0;
				while(j<m1)
				{matriz3[i][j]=matriz1[i][j];
				j++;
				}
				i++;
				}
				n3=n1;
				m3=m1;
				}
				else
				{i=0;
	            while(i<n2)
				{j=0;
	            while(j<m2)
				{matriz3[i][j]=matriz2[i][j];
				j++;}
				i++;
				}
				n3=n2;
				m3=m2;
				}
}
void transpuesta(int matriz3[N][N],int n3,int m3)
{int i,j,k,aux,l;
				if(n3==m3){
				 while(i<n3-1)
				 {j=i+1;
				 while(j<m3)
				 {aux=matriz3[i][j];
				  matriz3[i][j]=matriz3[j][i];
				  matriz3[j][i]=aux;
				  j++;
				 }
				 i++;
				 }
				 }
				else{
				 if(n3!=m3)
				 {
					while(i<m3)
					{j=i+1;
					while(j<n3)
					{aux=matriz3[i][j];
					matriz3[i][j]=matriz3[j][i];
					matriz3[j][i]=aux;
					j++;}
					i++;
					}
					if(n3>m3)
					{k=n3-m3;
					l=m3;
					m3=m3+k;
					i=m3;
					while(i<n3)
					{j=l+1;
					while(j<m3)
					{
					aux=matriz3[i][j];
					matriz3[i][j]=matriz3[j][i];
					matriz3[j][i]=aux;
					j++;
					}
					i++;
					}
					n3=n3-k;
					}
					else
					{k=m3-n3;
					l=n3;
					n3=n3+k;
					j=l;
					while(j<n3)
					{i=0;
					while(i<m3)
					{
					aux=matriz3[i][j];
					matriz3[i][j]=matriz3[j][i];
					matriz3[j][i]=aux;
					i++;}
					j++;
					}
					m3=m3-k;
					}
					}
}
}

void ordenarporfila(int matriz1[N][N],int matriz2[N][N],int matriz3[N][N],int n1,int m1,int n2,int m2,int &n3,int &m3,int l)
{int i,j,k;
if(l==1){
for(i=0;i<n1;i++)
{for(j=0;j<m1;j++)
{matriz3[i][j]=matriz1[i][j];
}
}
n3=n1;
m3=m1;
}
else
{for(i=0;i<n2;i++)
{for(j=0;j<m2;j++)
{matriz3[i][j]=matriz2[i][j];
}
}
n3=n2;
m3=m2;
}
for(i=0;i<n3;i++)
{for(j=0;j<m3;j++)
{for(k=0;k<n3;k++)
{for(l=0;l<m3;l++)
{if(matriz3[i][j]<matriz3[k][l])
{swap(matriz3[i][j],matriz3[k][l]);
}
}
}
}
}
}
void ordenarporcolumna(int matriz1[N][N],int matriz2[N][N],int matriz3[N][N],int n1,int m1,int n2,int m2,int &n3,int &m3,int l)
{int i,j,k; if(l==1){
for(i=0;i<n1;i++)
{for(j=0;j<m1;j++)
{matriz3[i][j]=matriz1[i][j];
}
}
n3=n1;
m3=m1;
}
else
{for(i=0;i<n2;i++)
{for(j=0;j<m2;j++)
{matriz3[i][j]=matriz2[i][j];
}
}
n3=n2;
m3=m2;
}
for(i=0;i<m3;i++)
{for(j=0;j<n3;j++)
{for(k=0;k<m3;k++)
{for(l=0;l<n3;l++)
{if(matriz3[j][i]<matriz3[l][k])
{swap(matriz3[j][i],matriz3[l][k]);
}
}
}
}
}
}
